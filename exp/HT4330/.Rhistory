planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar4),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa4=AciertosEtapa4+1
#print(planilla)
n5=70
Eliminar5=3
vaciertos5  <- mapply( ftirar, planilla$probReal, n5 )
contadorTiros=contadorTiros + n5*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos5#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n5 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar5),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa5=AciertosEtapa5+1
#print(planilla)
n6=160
Eliminar6=2
vaciertos6  <- mapply( ftirar, planilla$probReal, n6 )
contadorTiros=contadorTiros + n6*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos6#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n6 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar6),] #Elimino la mitad
#print(planilla)
if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de seleccionar al mejor en esta etapa
AciertosEtapa6=AciertosEtapa6+1
}
#Petapa1=AciertosEtapa1/iteraciones
#Petapa2=AciertosEtapa2/iteraciones
#Petapa3=AciertosEtapa3/iteraciones
#Petapa4=AciertosEtapa4/iteraciones
#Petapa5=AciertosEtapa5/iteraciones
Petapa6=AciertosEtapa6/iteraciones
cat('semilla: ',semilla,' probabilidad: ', Petapa6, ' tiros: ',contadorTiros, '\n') #imprimo la semilla, la probabilidad de encontrar el mejor y la cantidad de tiros
}
{
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton,mejor ) #intencionalmente el mejor esta al final
NumeroMejor=100 #dorsal del mejor jugador
numeros=(1:100)
contadorTiros=0
jugadores=rbind(numeros,jugadores)
#AciertosEtapa1=0
#AciertosEtapa2=0
#AciertosEtapa3=0
#AciertosEtapa4=0
#AciertosEtapa5=0
AciertosEtapa6=0
iteraciones=10000
set.seed(semilla)
for (i in 1:iteraciones)
{
n1=70
Eliminar=50
vaciertos1  <- mapply( ftirar, jugadores[2,], n1 )
contadorTiros=n1*length(jugadores[2,])
planilla=data.frame("dorsal"= jugadores[1,],"probReal"=jugadores[2,],"aciertos"=vaciertos1,"tirosTotales"=n1,"probabilidadMedida"=vaciertos1/n1) #creo una planilla que voy actualizando
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa1=AciertosEtapa1+1
#print(planilla)
n2=70
Eliminar2=25
vaciertos2  <- mapply( ftirar, planilla$probReal, n2 )
contadorTiros=contadorTiros + n2*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos2 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n2 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar2),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa2=AciertosEtapa2+1
#print(planilla)
n3=70
Eliminar3=13
vaciertos3  <- mapply( ftirar, planilla$probReal, n3 )
contadorTiros=contadorTiros + n3*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos3 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n3 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar3),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa3=AciertosEtapa3+1
#print(planilla)
n4=70
Eliminar4=6
vaciertos4  <- mapply( ftirar, planilla$probReal, n4 )
contadorTiros=contadorTiros + n4*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos4 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n4 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar4),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa4=AciertosEtapa4+1
#print(planilla)
n5=70
Eliminar5=3
vaciertos5  <- mapply( ftirar, planilla$probReal, n5 )
contadorTiros=contadorTiros + n5*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos5#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n5 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar5),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa5=AciertosEtapa5+1
#print(planilla)
n6=160
Eliminar6=2
vaciertos6  <- mapply( ftirar, planilla$probReal, n6 )
contadorTiros=contadorTiros + n6*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos6#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n6 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar6),] #Elimino la mitad
#print(planilla)
if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de seleccionar al mejor en esta etapa
AciertosEtapa6=AciertosEtapa6+1
}
#Petapa1=AciertosEtapa1/iteraciones
#Petapa2=AciertosEtapa2/iteraciones
#Petapa3=AciertosEtapa3/iteraciones
#Petapa4=AciertosEtapa4/iteraciones
#Petapa5=AciertosEtapa5/iteraciones
Petapa6=AciertosEtapa6/iteraciones
cat('semilla: ',semilla,' probabilidad: ', Petapa6, ' tiros: ',contadorTiros, '\n') #imprimo la semilla, la probabilidad de encontrar el mejor y la cantidad de tiros
}
rm( list=ls() )  #remove all objects
require("data.table")
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
# Estrategia: En cada etapa hago tirar a los competidors 70 tiros libres (a excepcion de la ultima que son 160), y en cada iteracion computo la probabilidad medida
# de ensestar teniendo en cuenta TODOS los tiros ejecutados
# en todas las etapas, en cada iteracion elimino la mitad con probabilidad mas baja, a la larga el bueno queda estadisticamente primero
ksemillas  <- c(200443, 200461, 200467, 200569, 200587)
#ksemillas=c(200443)
for(semilla in ksemillas)
{
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton,mejor ) #intencionalmente el mejor esta al final
NumeroMejor=100 #dorsal del mejor jugador
numeros=(1:100)
contadorTiros=0
jugadores=rbind(numeros,jugadores)
#AciertosEtapa1=0
#AciertosEtapa2=0
#AciertosEtapa3=0
#AciertosEtapa4=0
#AciertosEtapa5=0
AciertosEtapa6=0
iteraciones=10
set.seed(semilla)
for (i in 1:iteraciones)
{
n1=70
Eliminar=50
vaciertos1  <- mapply( ftirar, jugadores[2,], n1 )
contadorTiros=n1*length(jugadores[2,])
planilla=data.frame("dorsal"= jugadores[1,],"probReal"=jugadores[2,],"aciertos"=vaciertos1,"tirosTotales"=n1,"probabilidadMedida"=vaciertos1/n1) #creo una planilla que voy actualizando
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa1=AciertosEtapa1+1
#print(planilla)
n2=70
Eliminar2=25
vaciertos2  <- mapply( ftirar, planilla$probReal, n2 )
contadorTiros=contadorTiros + n2*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos2 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n2 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar2),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa2=AciertosEtapa2+1
#print(planilla)
n3=70
Eliminar3=13
vaciertos3  <- mapply( ftirar, planilla$probReal, n3 )
contadorTiros=contadorTiros + n3*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos3 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n3 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar3),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa3=AciertosEtapa3+1
#print(planilla)
n4=70
Eliminar4=6
vaciertos4  <- mapply( ftirar, planilla$probReal, n4 )
contadorTiros=contadorTiros + n4*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos4 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n4 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar4),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa4=AciertosEtapa4+1
#print(planilla)
n5=70
Eliminar5=3
vaciertos5  <- mapply( ftirar, planilla$probReal, n5 )
contadorTiros=contadorTiros + n5*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos5#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n5 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar5),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa5=AciertosEtapa5+1
#print(planilla)
n6=160
Eliminar6=2
vaciertos6  <- mapply( ftirar, planilla$probReal, n6 )
contadorTiros=contadorTiros + n6*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos6#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n6 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar6),] #Elimino la mitad
#print(planilla)
if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de seleccionar al mejor en esta etapa
AciertosEtapa6=AciertosEtapa6+1
}
#Petapa1=AciertosEtapa1/iteraciones
#Petapa2=AciertosEtapa2/iteraciones
#Petapa3=AciertosEtapa3/iteraciones
#Petapa4=AciertosEtapa4/iteraciones
#Petapa5=AciertosEtapa5/iteraciones
Petapa6=AciertosEtapa6/iteraciones
cat('semilla: ',semilla,' probabilidad: ', Petapa6, ' tiros: ',contadorTiros, '\n') #imprimo la semilla, la probabilidad de encontrar el mejor y la cantidad de tiros
}
rm( list=ls() )  #remove all objects
require("data.table")
#calcula cuantos encestes logra un jugador con indice de enceste prob que hace qyt tiros libres
ftirar  <- function( prob, qty )
{
return( sum( runif(qty) < prob ) )
}
# Estrategia: En cada etapa hago tirar a los competidors 70 tiros libres (a excepcion de la ultima que son 160), y en cada iteracion computo la probabilidad medida
# de ensestar teniendo en cuenta TODOS los tiros ejecutados
# en todas las etapas, en cada iteracion elimino la mitad con probabilidad mas baja, a la larga el bueno queda estadisticamente primero
ksemillas  <- c(200443, 200461, 200467, 200569, 200587)
#ksemillas=c(200443)
for(semilla in ksemillas)
{
#defino los jugadores
mejor      <-  0.7
peloton    <-  ( 501:599 ) / 1000
jugadores  <-  c( peloton,mejor ) #intencionalmente el mejor esta al final
NumeroMejor=100 #dorsal del mejor jugador
numeros=(1:100)
contadorTiros=0
jugadores=rbind(numeros,jugadores)
#AciertosEtapa1=0
#AciertosEtapa2=0
#AciertosEtapa3=0
#AciertosEtapa4=0
#AciertosEtapa5=0
AciertosEtapa6=0
iteraciones=10000
set.seed(semilla)
for (i in 1:iteraciones)
{
n1=70
Eliminar=50
vaciertos1  <- mapply( ftirar, jugadores[2,], n1 )
contadorTiros=n1*length(jugadores[2,])
planilla=data.frame("dorsal"= jugadores[1,],"probReal"=jugadores[2,],"aciertos"=vaciertos1,"tirosTotales"=n1,"probabilidadMedida"=vaciertos1/n1) #creo una planilla que voy actualizando
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa1=AciertosEtapa1+1
#print(planilla)
n2=70
Eliminar2=25
vaciertos2  <- mapply( ftirar, planilla$probReal, n2 )
contadorTiros=contadorTiros + n2*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos2 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n2 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar2),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa2=AciertosEtapa2+1
#print(planilla)
n3=70
Eliminar3=13
vaciertos3  <- mapply( ftirar, planilla$probReal, n3 )
contadorTiros=contadorTiros + n3*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos3 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n3 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar3),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa3=AciertosEtapa3+1
#print(planilla)
n4=70
Eliminar4=6
vaciertos4  <- mapply( ftirar, planilla$probReal, n4 )
contadorTiros=contadorTiros + n4*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos4 #actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n4 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar4),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa4=AciertosEtapa4+1
#print(planilla)
n5=70
Eliminar5=3
vaciertos5  <- mapply( ftirar, planilla$probReal, n5 )
contadorTiros=contadorTiros + n5*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos5#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n5 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar5),] #Elimino la mitad
#if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de no eliminar al mejor en esta etapa (solo para entender, no es relevante)
#AciertosEtapa5=AciertosEtapa5+1
#print(planilla)
n6=160
Eliminar6=2
vaciertos6  <- mapply( ftirar, planilla$probReal, n6 )
contadorTiros=contadorTiros + n6*length(planilla$probReal)
planilla$aciertos=planilla$aciertos+vaciertos6#actualizo aciertos
planilla$tirosTotales=planilla$tirosTotales+n6 #actualizo tiros totales
planilla$probabilidadMedida=planilla$aciertos/planilla$tirosTotales #actualizo probabilidades medidas
planilla=planilla[order(planilla$probabilidadMedida),] #Ordena la planilla segun los aciertos medidos (mejor al final)
planilla=planilla[-(1:Eliminar6),] #Elimino la mitad
#print(planilla)
if(NumeroMejor %in% planilla$dorsal) #Actualizo la probabilidad de seleccionar al mejor en esta etapa
AciertosEtapa6=AciertosEtapa6+1
}
#Petapa1=AciertosEtapa1/iteraciones
#Petapa2=AciertosEtapa2/iteraciones
#Petapa3=AciertosEtapa3/iteraciones
#Petapa4=AciertosEtapa4/iteraciones
#Petapa5=AciertosEtapa5/iteraciones
Petapa6=AciertosEtapa6/iteraciones
cat('semilla: ',semilla,' probabilidad: ', Petapa6, ' tiros: ',contadorTiros, '\n') #imprimo la semilla, la probabilidad de encontrar el mejor y la cantidad de tiros
}
#Optimizacion Bayesiana de hiperparametros de  ranger  (Random Forest)
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("yaml")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 20   #cantidad de iteraciones de la Optimizacion Bayesiana
#Estructura que define los hiperparÃ¡metros y sus rangos
hs  <- makeParamSet(
makeIntegerParam("num.trees" ,        lower=  1500L, upper= 2500L),  #la letra L al final significa ENTERO
makeIntegerParam("max.depth",         lower=    15L, upper=   30L),  # 0 significa profundidad infinita
makeIntegerParam("min.node.size" ,    lower=    500L, upper=  1500L),
makeIntegerParam("mtry" ,             lower=    10L, upper=   20L))
ksemilla_azar  <- 200443  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg ), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file= archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file= archivo, append= TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ranger_Simple  <- function( fold_test, pdata, param )
{
#genero el modelo
set.seed(ksemilla_azar)
modelo  <- ranger( formula= "clase_binaria ~ .",
data=  pdata[ fold!= fold_test],
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
)
prediccion  <- predict( modelo, pdata[ fold == fold_test] )
ganancia_testing  <- pdata[ fold==fold_test,
sum( (prediccion$predictions[ ,"POS" ] > 1/60) *
ifelse( clase_binaria=="POS", 59000, -1000)  ) ]
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ranger_CrossValidation  <- function( data, param, pcampos_buenos, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )
particionar( data, divi, seed=semilla, agrupa=pagrupa )
ganancias  <- mcmapply( ranger_Simple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #dejar esto en  1, porque ranger ya corre en paralelo
data[ , fold := NULL ]   #elimino el campo fold
#devuelvo la ganancia promedio normalizada
ganancia_promedio  <- mean( unlist( ganancias ) )
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales
EstimarGanancia_ranger  <- function( x )
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
xval_folds  <- 5   # 5-fold cross validation
ganancia  <- ranger_CrossValidation( dataset,
param= x,
qfolds= xval_folds,
pagrupa= "clase_binaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion  <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui comienza el programa
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
setwd("C:\\Users\\Martin\\Desktop\\MineriaDeDatos\\")
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT4330/", showWarnings = FALSE )
#setwd("D:\\gdrive\\ITBA2022A\\labo\\exp\\HT4330\\")   #Establezco el Working Directory DEL EXPERIMENTO
setwd("C:\\Users\\Martin\\Desktop\\MineriaDeDatos\\labo\\exp\\HT4330\\")
#en estos archivos quedan los resultados
kbayesiana  <- "HT433.RDATA"
klog        <- "HT433.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso a trabajar con clase binaria POS={BAJA+2}   NEG={BAJA+1, CONTINUA}
dataset[ , clase_binaria := as.factor(ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" )) ]
dataset[ , clase_ternaria := NULL ]  #elimino la clase_ternaria, ya no la necesito
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, Â¿por que le temias a los nulos?
dataset  <- na.roughfix( dataset )
#Aqui comienza la configuracion de la Bayesian Optimization
configureMlr( show.learner.output = FALSE)
funcion_optimizar  <- EstimarGanancia_ranger
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <-  makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if(!file.exists(kbayesiana)) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
